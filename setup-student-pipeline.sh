#!/bin/bash
# ------------------------------------------------------------------
# GitOps-Compatible Student Pipeline Setup Script
# Applies only infrastructure resources, lets ArgoCD manage app deployments
# ------------------------------------------------------------------
set -euo pipefail
echo "üîß Student Pipeline Setup Script (GitOps Mode)"

# ============================================================================
# CRITICAL: Branch Validation First
# ============================================================================
echo "üîç Validating your branch setup..."
current_branch=$(git branch --show-current 2>/dev/null || echo "no-git")
current_dir=$(basename "$(pwd)" 2>/dev/null || echo "unknown")

echo "   üìÅ Current directory: ${current_dir}"
echo "   üåø Current git branch: ${current_branch}"

# Validate directory
if [ "${current_dir}" != "argocd" ]; then
    echo "‚ùå ERROR: You must run this script from the 'argocd' directory!"
    echo ""
    echo "üîß Fix this by running:"
    echo "   cd /home/coder/workspace/labs/day3-gitops/argocd"
    echo "   ./setup-student-pipeline.sh"
    exit 1
fi

# Validate git repository
if [ "${current_branch}" = "no-git" ]; then
    echo "‚ùå ERROR: Not in a git repository!"
    echo ""
    echo "üîß Fix this by running:"
    echo "   cd /home/coder/workspace/labs/day3-gitops"
    echo "   rm -rf argocd"
    echo "   git clone -b student01 https://github.com/kevin-biot/argocd"
    echo "   cd argocd"
    echo "   ./setup-student-pipeline.sh"
    exit 1
fi

# Detect expected student namespace from git branch
expected_namespace="${current_branch}"

# Validate branch matches expected pattern
if [[ ! "${current_branch}" =~ ^student[0-9]+$ ]]; then
    echo "‚ùå ERROR: You're on branch '${current_branch}' but should be on a student branch!"
    echo ""
    echo "üîß Fix this by running:"
    echo "   cd /home/coder/workspace/labs/day3-gitops"
    echo "   rm -rf argocd"
    echo "   git clone -b student01 https://github.com/kevin-biot/argocd  # Use YOUR student ID"
    echo "   cd argocd"
    echo "   ./setup-student-pipeline.sh"
    exit 1
fi

echo "‚úÖ Branch validation passed!"
echo "   üìã Using namespace: ${expected_namespace}"
echo "   üéØ This matches your git branch: ${current_branch}"
echo ""

# ============================================================================
# Setup Configuration
# ============================================================================

# Auto-configure based on git branch
NAMESPACE="${expected_namespace}"
REPO_URL="https://github.com/kevin-biot/argocd.git"

echo "üìã Configuration auto-detected from your git branch:"
echo "   üè∑Ô∏è  Namespace: ${NAMESPACE}"
echo "   üì¶ Git Repo:  ${REPO_URL}"
echo "   üéØ Mode:      GitOps (ArgoCD manages deployments)"
echo ""
read -rp "‚ùì Proceed with auto-detected values? (y/n): " CONFIRM
[[ "$CONFIRM" != [yY] ]] && { echo "‚ùå Aborted."; exit 1; }

DEST_DIR="rendered_${NAMESPACE}"
mkdir -p "$DEST_DIR"

# ---------- Infrastructure resources (applied by script) ----------
INFRASTRUCTURE_FILES=(
  k8s/rbac/pipeline-app-role.yaml
  k8s/rbac/pipeline-app-binding.yaml
  tekton/pipeline-optimized.yaml
  shipwright/build/build-beta.yaml
)

# ---------- GitOps resources (applied by script) ----------
GITOPS_FILES=(
  argocd/application.yaml    # ArgoCD Application - manages deployments
)

# ---------- Tekton tasks (applied per-namespace, converted from ClusterTasks) ----------
TEKTON_TASKS=(
  tekton/tasks/shipwright-trigger-beta.yaml
  tekton/tasks/shipwright-trigger-day3.yaml
  tekton/tasks/update-manifests-day3.yaml
  tekton/tasks/update-manifests-optimized.yaml
)

# ---------- ClusterTasks converted to Tasks (applied per-namespace) ----------
CONVERTED_TASKS=(
  tekton/clustertasks/git-clone-optimized.yaml
  tekton/clustertasks/maven-build-optimized.yaml
  tekton/clustertasks/war-sanity-check-optimized.yaml
  tekton/clustertasks/git-clone-day3.yaml
  tekton/clustertasks/maven-build.yaml
  tekton/clustertasks/war-sanity-check.yaml
)

# ---------- Application resources (rendered only - ArgoCD manages) ----------
APP_FILES_RENDER_ONLY=(
  k8s/deployment.yaml        # ArgoCD will create this
  k8s/service.yaml          # ArgoCD will create this  
  k8s/route.yaml            # ArgoCD will create this
)

# ---------- Pipeline execution files (rendered only - student triggers) ----------
PIPELINE_FILES_RENDER_ONLY=(
  tekton/pvc.yaml
  shipwright/build/buildrun-beta.yaml
  tekton/pipeline-run.yaml
)

ALL_RENDER_FILES=("${INFRASTRUCTURE_FILES[@]}" "${GITOPS_FILES[@]}" "${APP_FILES_RENDER_ONLY[@]}" "${PIPELINE_FILES_RENDER_ONLY[@]}")

echo -e "\nüñ®Ô∏è  Rendering files into: $DEST_DIR"
for f in "${ALL_RENDER_FILES[@]}"; do
  tgt="$DEST_DIR/$(basename "$f")"
  sed -e "s|{{NAMESPACE}}|$NAMESPACE|g" \
      -e "s|{{GIT_REPO_URL}}|$REPO_URL|g" \
      -e "s|{{IMAGE_TAG}}|latest|g" \
      "$f" > "$tgt"
  echo "‚úÖ Rendered: $tgt"
done

echo -e "\nüöÄ Applying infrastructure resources:"

# Create ImageStream first (infrastructure)
echo "‚û°Ô∏è  Creating ImageStream for namespace: $NAMESPACE"
cat << EOF | oc apply -n "$NAMESPACE" -f -
apiVersion: image.openshift.io/v1
kind: ImageStream
metadata:
  name: java-webapp
  namespace: $NAMESPACE
spec:
  lookupPolicy:
    local: false
EOF

for f in "${INFRASTRUCTURE_FILES[@]}"; do
  base_file=$(basename "$f")
  echo "‚û°Ô∏è  Applying $base_file to namespace: $NAMESPACE"
  oc apply -n "$NAMESPACE" -f "$DEST_DIR/$base_file"
done

echo -e "\nüéØ Setting up GitOps (ArgoCD):"

# NEW: Copy rendered application manifests to k8s directory for ArgoCD
echo "üìÅ Copying rendered manifests to k8s directory..."
cp "$DEST_DIR/deployment.yaml" k8s/
cp "$DEST_DIR/service.yaml" k8s/
cp "$DEST_DIR/route.yaml" k8s/

# Remove any infrastructure files that shouldn't be managed by ArgoCD
rm -f k8s/*imagestream.yaml k8s/pipeline-*.yaml k8s/build*.yaml k8s/rbac/ 2>/dev/null || true

echo "üîÑ Committing rendered manifests to git..."
# Check if we're on the student branch, if not switch to it
current_branch=$(git branch --show-current)
if [ "$current_branch" != "$NAMESPACE" ]; then
  echo "üìã Switching to branch: $NAMESPACE"
  git checkout "$NAMESPACE" 2>/dev/null || git checkout -b "$NAMESPACE"
fi

# Stage and commit the k8s manifests
git add k8s/deployment.yaml k8s/service.yaml k8s/route.yaml
if git diff --staged --quiet; then
  echo "‚ÑπÔ∏è  No changes to commit - manifests already up to date"
else
  git commit -m "Deploy rendered k8s manifests for $NAMESPACE"
  echo "üöÄ Pushing manifests to branch: $NAMESPACE"
  git push origin "$NAMESPACE"
fi

# NOW apply ArgoCD application (after manifests are in git)
for f in "${GITOPS_FILES[@]}"; do
  base_file=$(basename "$f")
  echo "‚û°Ô∏è  Applying $base_file to namespace: openshift-gitops"
  oc apply -n openshift-gitops -f "$DEST_DIR/$base_file"
done

echo -e "\nüîß Applying Tekton tasks (no templating needed):"
for f in "${TEKTON_TASKS[@]}"; do
  echo "‚û°Ô∏è  Applying $(basename "$f") to namespace: $NAMESPACE"
  oc apply -n "$NAMESPACE" -f "$f"
done

echo -e "\nüîß Installing converted ClusterTasks as regular Tasks:"
for f in "${CONVERTED_TASKS[@]}"; do
  echo "‚û°Ô∏è  Converting and applying $(basename "$f") to namespace: $NAMESPACE"
  # Convert ClusterTask to Task and apply per-namespace
  sed 's/kind: ClusterTask/kind: Task/' "$f" | oc apply -n "$NAMESPACE" -f -
done

echo -e "\n‚è≥ Waiting for ArgoCD to sync application..."
sleep 5

# Check ArgoCD application status
echo "üîç Checking ArgoCD Application status:"
oc get application java-webapp-$NAMESPACE -n openshift-gitops -o jsonpath='{.status.health.status}' 2>/dev/null || echo "Application not ready yet"

# ---------------------- STUDENT COPY-PASTE INSTRUCTIONS ----------------------
cat <<EOF

üéâ GitOps Setup Complete for namespace: $NAMESPACE
üìÇ Rendered files are in: $DEST_DIR

üìã What was created:
   ‚úÖ Infrastructure: RBAC, ImageStream, Optimized Pipeline, Beta Build
   ‚úÖ ArgoCD Application: java-webapp-$NAMESPACE  
   ‚úÖ Tekton Tasks: All tasks installed per-namespace (Tekton 1.19 compatible)
   ‚úÖ Tekton 1.19 Fix: Converted ClusterTasks to regular Tasks with resolver syntax
   ‚úÖ Resource Optimized: 1000m CPU total (fits in student quota)
   ‚úÖ Shipwright Beta API: v1beta1 with system parameter auto-injection

üìã What ArgoCD will create:
   üéØ Deployment, Service, Route (managed by GitOps)

üåê Your app will be available at:
      https://\$(oc get route java-webapp -n $NAMESPACE -o jsonpath='{.spec.host}')

================================================================================
üìù COPY-PASTE INSTRUCTIONS: Follow these steps EXACTLY
================================================================================

üìù STEP 1: Navigate to rendered directory

Copy and paste this command:

cd $DEST_DIR

‚úÖ Validate: You should see files like buildrun-beta.yaml, pipeline-run.yaml

ls -la

---

üìù STEP 2: Check ArgoCD Application status

Copy and paste this command:

oc get application java-webapp-$NAMESPACE -n openshift-gitops

‚úÖ Expected output: Should show your ArgoCD application

---

üìù STEP 3: Run complete CI/CD pipeline

Copy and paste these commands ONE BY ONE:

oc delete pipelinerun --all -n $NAMESPACE --ignore-not-found

oc apply -f pipeline-run.yaml -n $NAMESPACE

üìù STEP 4: Monitor pipeline progress

Copy and paste this command to watch pipeline logs:

tkn pipelinerun logs -f -n $NAMESPACE

(This will follow the logs until completion)

---

üìù STEP 5: Access ArgoCD UI to see GitOps magic

üåê Open ArgoCD Console in your browser:

https://openshift-gitops-server-openshift-gitops.apps.bootcamp-ocs-cluster.bootcamp.tkmind.net

üîë Login Instructions:
   1. Click "LOG IN VIA OPENSHIFT" button
   2. Username: $NAMESPACE
   3. Password: DevOps2025!

üì± Direct link to YOUR application:

https://openshift-gitops-server-openshift-gitops.apps.bootcamp-ocs-cluster.bootcamp.tkmind.net/applications/openshift-gitops/java-webapp-$NAMESPACE?view=tree&resource=

‚úÖ What you should see in ArgoCD:
   ‚Ä¢ Application: java-webapp-$NAMESPACE
   ‚Ä¢ Status: "Synced" (green)
   ‚Ä¢ Health: "Healthy" (green)
   ‚Ä¢ Source: Your git branch ($NAMESPACE)
   ‚Ä¢ Resources: Deployment, Service, Route

üí° Copy these URLs to use in your browser:

echo "ArgoCD Console: https://openshift-gitops-server-openshift-gitops.apps.bootcamp-ocs-cluster.bootcamp.tkmind.net"

echo "Your Application: https://openshift-gitops-server-openshift-gitops.apps.bootcamp-ocs-cluster.bootcamp.tkmind.net/applications/openshift-gitops/java-webapp-$NAMESPACE?view=tree&resource="

---

üìù STEP 6: Verify your deployed application

Copy and paste these commands to check your app:

oc get pods -n $NAMESPACE

oc get route java-webapp -n $NAMESPACE

üåê Get your application URL:

echo "https://\$(oc get route java-webapp -n $NAMESPACE -o jsonpath='{.spec.host}')"

================================================================================

‚úÖ SUCCESS CRITERIA: Your workshop is successful when:
   ‚úÖ Pipeline completes successfully (pipelinerun shows "Succeeded")
   ‚úÖ ArgoCD shows your application as "Synced" and "Healthy"
   ‚úÖ Your application URL responds with the Java webapp
   ‚úÖ You can login to ArgoCD UI with your student credentials
   ‚úÖ You can see your java-webapp-$NAMESPACE application in ArgoCD

üö® IMPORTANT REMINDERS:
   ‚Ä¢ Copy-paste commands ONE BY ONE (don't copy multiple lines at once)
   ‚Ä¢ Wait for each step to complete before proceeding
   ‚Ä¢ Use the validation commands to check progress
   ‚Ä¢ If something fails, re-run from that step

üîß TROUBLESHOOTING ArgoCD Access:
   
   If you can't see your application in ArgoCD UI:
   1. Verify you logged in with: $NAMESPACE / DevOps2025!
   2. Check application exists via CLI:
      oc get application java-webapp-$NAMESPACE -n openshift-gitops
   3. If application exists but not visible, this is an RBAC issue
      (instructor will address ArgoCD permissions in next update)

üìö GitOps Benefits you just experienced:
   ‚Ä¢ ArgoCD manages all application deployments automatically
   ‚Ä¢ Single source of truth (Git repository branch: $NAMESPACE)
   ‚Ä¢ Automatic drift detection and correction
   ‚Ä¢ Declarative deployment model

EOF